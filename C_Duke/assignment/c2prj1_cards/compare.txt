#include "cards.h"							#include "cards.h"
#include <assert.h>							#include <assert.h>
#include <stdio.h>							#include <stdio.h>
#include <stdlib.h>							#include <stdlib.h>
									
// Function to validate a card					<       
void assert_card_valid(card_t c) {					void assert_card_valid(card_t c) {
  assert(c.value >= 2 && c.value <= VALUE_ACE);				  assert(c.value >= 2 && c.value <= VALUE_ACE);
  assert(c.suit >= SPADES && c.suit < NUM_SUITS);		|         assert(c.suit >= SPADES && c.suit <= CLUBS);
}									}
									
// Function to convert hand ranking to a string			<       
const char *ranking_to_string(hand_ranking_t r) {			const char *ranking_to_string(hand_ranking_t r) {
  switch (r) {								  switch (r) {
  case STRAIGHT_FLUSH:							  case STRAIGHT_FLUSH:
    return "STRAIGHT_FLUSH";						    return "STRAIGHT_FLUSH";
  case FOUR_OF_A_KIND:							  case FOUR_OF_A_KIND:
    return "FOUR_OF_A_KIND";						    return "FOUR_OF_A_KIND";
  case FULL_HOUSE:							  case FULL_HOUSE:
    return "FULL_HOUSE";						    return "FULL_HOUSE";
  case FLUSH:								  case FLUSH:
    return "FLUSH";							    return "FLUSH";
  case STRAIGHT:							  case STRAIGHT:
    return "STRAIGHT";							    return "STRAIGHT";
  case THREE_OF_A_KIND:							  case THREE_OF_A_KIND:
    return "THREE_OF_A_KIND";						    return "THREE_OF_A_KIND";
  case TWO_PAIR:							  case TWO_PAIR:
    return "TWO_PAIR";							    return "TWO_PAIR";
  case PAIR:								  case PAIR:
    return "PAIR";							    return "PAIR";
  case NOTHING:								  case NOTHING:
    return "NOTHING";							    return "NOTHING";
  default:								  default:
    return "UNKNOWN";						|           return "UKNOWN_RANKING";
  }									  }
}									}
									
// Function to get the textual representation of card val       <       
char value_letter(card_t c) {						char value_letter(card_t c) {
  if (c.value >= 2 && c.value <= 9) {				<       
    return '0' + c.value;					<       
  }								<       
  switch (c.value) {							  switch (c.value) {
								>         case 2:
								>           return '2';
								>         case 3:
								>           return '3';
								>         case 4:
								>           return '4';
								>         case 5:
								>           return '5';
								>         case 6:
								>           return '6';
								>         case 7:
								>           return '7';
								>         case 8:
								>           return '8';
								>         case 9:
								>           return '9';
  case 10:								  case 10:
    return '0';								    return '0';
  case VALUE_JACK:							  case VALUE_JACK:
    return 'J';								    return 'J';
  case VALUE_QUEEN:							  case VALUE_QUEEN:
    return 'Q';								    return 'Q';
  case VALUE_KING:							  case VALUE_KING:
    return 'K';								    return 'K';
  case VALUE_ACE:							  case VALUE_ACE:
    return 'A';								    return 'A';
  default:								  default:
    return '?'; // Invalid value				|           return 'x';
  }									  }
}									}
									
// Function to get the textual representation of card sui       <       
char suit_letter(card_t c) {						char suit_letter(card_t c) {
  switch (c.suit) {							  switch (c.suit) {
  case SPADES:								  case SPADES:
    return 's';								    return 's';
  case HEARTS:								  case HEARTS:
    return 'h';								    return 'h';
  case DIAMONDS:							  case DIAMONDS:
    return 'd';								    return 'd';
  case CLUBS:								  case CLUBS:
    return 'c';								    return 'c';
  default:							|         case NUM_SUITS:
    return '?'; // Invalid suit					|           return 'n';
  }									  }
}									}
									
// Function to print the card					<       
void print_card(card_t c) { printf("%c%c", value_letter(c		void print_card(card_t c) { printf("%c%c", value_letter(c
									
// Function to create a card from letters			<       
card_t card_from_letters(char value_let, char suit_let) {		card_t card_from_letters(char value_let, char suit_let) {
  card_t card;							|         card_t temp;
  switch (value_let) {							  switch (value_let) {
  case '2':								  case '2':
    card.value = 2;						|           temp.value = 2;
    break;								    break;
  case '3':								  case '3':
    card.value = 3;						|           temp.value = 3;
    break;								    break;
  case '4':								  case '4':
    card.value = 4;						|           temp.value = 4;
    break;								    break;
  case '5':								  case '5':
    card.value = 5;						|           temp.value = 5;
    break;								    break;
  case '6':								  case '6':
    card.value = 6;						|           temp.value = 6;
    break;								    break;
  case '7':								  case '7':
    card.value = 7;						|           temp.value = 7;
    break;								    break;
  case '8':								  case '8':
    card.value = 8;						|           temp.value = 8;
    break;								    break;
  case '9':								  case '9':
    card.value = 9;						|           temp.value = 9;
    break;								    break;
  case '0':								  case '0':
    card.value = 10;						|           temp.value = 10;
    break;								    break;
  case 'J':								  case 'J':
    card.value = VALUE_JACK;					|           temp.value = VALUE_JACK;
    break;								    break;
  case 'Q':								  case 'Q':
    card.value = VALUE_QUEEN;					|           temp.value = VALUE_QUEEN;
    break;								    break;
  case 'K':								  case 'K':
    card.value = VALUE_KING;					|           temp.value = VALUE_KING;
    break;								    break;
  case 'A':								  case 'A':
    card.value = VALUE_ACE;					|           temp.value = VALUE_ACE;
    break;								    break;
  default:								  default:
    fprintf(stderr, "Invalid card value: %c\n", value_let		    fprintf(stderr, "Invalid card value: %c\n", value_let
    exit(EXIT_FAILURE);							    exit(EXIT_FAILURE);
  }									  }
									
  switch (suit_let) {							  switch (suit_let) {
  case 's':								  case 's':
    card.suit = SPADES;						|           temp.suit = SPADES;
    break;								    break;
  case 'h':								  case 'h':
    card.suit = HEARTS;						|           temp.suit = HEARTS;
    break;								    break;
  case 'd':								  case 'd':
    card.suit = DIAMONDS;					|           temp.suit = DIAMONDS;
    break;								    break;
  case 'c':								  case 'c':
    card.suit = CLUBS;						|           temp.suit = CLUBS;
    break;								    break;
  default:								  default:
    fprintf(stderr, "Invalid card suit: %c\n", suit_let);		    fprintf(stderr, "Invalid card suit: %c\n", suit_let);
    exit(EXIT_FAILURE);							    exit(EXIT_FAILURE);
  }									  }
								|         assert_card_valid(temp);
  assert_card_valid(card);					|         return temp;
  return card;							<       
}									}
									
// Function to create a card from a number			<       
card_t card_from_num(unsigned c) {					card_t card_from_num(unsigned c) {
  card_t card;							|         card_t temp;
  if (c >= 52) {						|         assert(c >= 0 && c < 52);
    fprintf(stderr, "Invalid card number: %u\n", c);		|         temp.value = (c % 13) + 2;
    exit(EXIT_FAILURE);						|         temp.suit = c / 13;
  }								|         return temp;
								<       
  card.value = (c % 13) + 2;					<       
  card.suit = c / 13;						<       
								<       
  return card;							<       
}									}
